heat.val<-read.delim("../../MNase_Yeast/H4_IP/results/RUN/11_TSS_profile/subNucs/values_Profile_sub.txt")
#defining color palette
dark2 <- c(RColorBrewer::brewer.pal(8, "Dark2"),RColorBrewer::brewer.pal(8, "Set1"),RColorBrewer::brewer.pal(8, "Set2"))
#split label names
lab<-strsplit(as.character(heat.val$bin.labels), split = "_")
#get conditions from profile
conditions<-NULL
for(i in 2:length(lab)){
temp<-(lab[[i]][which(grepl( "U", lab[[i]], fixed = TRUE))])
assign(paste("data.",temp, sep=""), grep(paste(temp),heat.val$bin.labels, value = T))
conditions<-c(conditions,paste("data.",temp, sep=""))
}
names <- gsub("data.","",conditions)
heat.val<-read.delim("../../MNase_Yeast/H2B_IP/results_rep1/RUN/11_TSS_profile/monoNucs/values_Profile_mono.txt")
#defining color palette
dark2 <- c(RColorBrewer::brewer.pal(8, "Dark2"),RColorBrewer::brewer.pal(8, "Set1"),RColorBrewer::brewer.pal(8, "Set2"))
#split label names
lab<-strsplit(as.character(heat.val$bin.labels), split = "_")
#get conditions from profile
conditions<-NULL
for(i in 3:length(lab)){
temp<-(lab[[i]][which(grepl( "U", lab[[i]], fixed = TRUE))])
assign(paste("data.",temp, sep=""), grep(paste(temp),heat.val$bin.labels, value = T))
conditions<-c(conditions,paste("data.",temp, sep=""))
}
View(lab)
for(i in :length(lab)){
if(lab[[i]][which(grepl( "pooled", lab[[i]], fixed = TRUE))]==TRUE){
next
}
temp<-(lab[[i]][which(grepl( "U", lab[[i]], fixed = TRUE))])
assign(paste("data.",temp, sep=""), grep(paste(temp),heat.val$bin.labels, value = T))
conditions<-c(conditions,paste("data.",temp, sep=""))
}
for(i in 2:length(lab)){
if(lab[[i]][which(grepl( "pooled", lab[[i]], fixed = TRUE))]==TRUE){
next
}
temp<-(lab[[i]][which(grepl( "U", lab[[i]], fixed = TRUE))])
assign(paste("data.",temp, sep=""), grep(paste(temp),heat.val$bin.labels, value = T))
conditions<-c(conditions,paste("data.",temp, sep=""))
}
View(lab)
#split label names
lab<-strsplit(as.character(heat.val$bin.labels), split = "_")
#get conditions from profile
lab<-
conditions<-NULL
for(i in 2:length(lab)){
if(lab[[i]][1]=="pooled"){
next
}
temp<-(lab[[i]][which(grepl( "U", lab[[i]], fixed = TRUE))])
assign(paste("data.",temp, sep=""), grep(paste(temp),heat.val$bin.labels, value = T))
conditions<-c(conditions,paste("data.",temp, sep=""))
}
lab[[4]][1]=="pooled"
lab[4]
lab[[4]]
#split label names
lab<-strsplit(as.character(heat.val$bin.labels), split = "_")
#get conditions from profile
lab<-
conditions<-NULL
for(i in 2:length(lab)){
if(lab[[i]][1]=="pooled"){
next
}
temp<-(lab[[i]][which(grepl( "U", lab[[i]], fixed = TRUE))])
assign(paste("data.",temp, sep=""), grep(paste(temp),heat.val$bin.labels, value = T))
conditions<-c(conditions,paste("data.",temp, sep=""))
}
#split label names
lab<-strsplit(as.character(heat.val$bin.labels), split = "_")
conditions<-NULL
for(i in 2:length(lab)){
if(lab[[i]][1]=="pooled"){
next
}
temp<-(lab[[i]][which(grepl( "U", lab[[i]], fixed = TRUE))])
assign(paste("data.",temp, sep=""), grep(paste(temp),heat.val$bin.labels, value = T))
conditions<-c(conditions,paste("data.",temp, sep=""))
}
names <- gsub("data.","",conditions)
i= "[dskfln]"
gsub("[\[,\],\ ,\,  ]","",i)
gsub("[","",i)
i
gsub("\[","",i)
gsub("[][]","",i)
i= "[dskfln"
gsub("[][]","",i)
i= "[dskfl, n"
gsub("[][,]","",i)
gsub("[][, ]","",i)
args <- /media/linuxmac/Storage1/Plasmodium/Data/Run01_Profiler/work_profiler/0c/f4d60dd1891b004f5ccec55b551357/values_Profile_mono.txt
args <- "/media/linuxmac/Storage1/Plasmodium/Data/Run01_Profiler/work_profiler/0c/f4d60dd1891b004f5ccec55b551357/values_Profile_mono.txt"
heat.val<-read.delim(file = args[1])
View(heat.val)
heat.val<-heat.val[order(heat.val[-1,]),]}
heat.val2<-heat.val[order(heat.val[-1,]),]
heat.val[-1,]
head(heat.val[-1,])
order(heat.val)
order(heat.val[,1])
heat.val2<-heat.val[order(heat.val[,-1]),]
heat.val2<-heat.val[order(,heat.val[,-1])]
heat.val2<-heat.val[,order(heat.val[,-1])]
head(heat.val[,1])
order(heat.val[,1])
head(heat.val[-1,1])
order(heat.val[-1,1])
as.integer(heat.val[-1,1])
heat.val2<-heat.val[order(heat.val[,1]),]
View(heat.val2)
args <- list.files("/media/linuxmac/Storage1/Plasmodium/Script/work_inspector/ef/50f6640bb75aec4edd436da1705275/")
###############################################################################
#####################  get best positioned nucleosome reference ###############
###############################################################################
library(rtracklayer)
install.packages("bioconductor")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("rtracklayer")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("rtracklayer")
###############################################################################
#####################  get best positioned nucleosome reference ###############
###############################################################################
library(rtracklayer)
BiocManager::install("rtracklayer")
warnings()
BiocManager::install("rtracklayer", force = T)
###############################################################################
#####################  get best positioned nucleosome reference ###############
###############################################################################
library(rtracklayer)
browseVignettes("BiocParallel")
?BiocParallel
??BiocParallel
###############################################################################
#####################  get best positioned nucleosome reference ###############
###############################################################################
library(rtracklayer)
###############################################################################
#####################  get best positioned nucleosome reference ###############
###############################################################################
library(rtracklayer)
library(stringr)
library(tidyverse)
library(plyranges)
library(stringr)
library(ggpubr)
# Load Reference
refPos <- read_bed("NucPosRef_top20.bed")
?write_delim
?gsub
BiocManager::install("vitkl/SLIMFinderR")
BiocManager::install("remotes")
BiocManager::install("vitkl/SLIMFinderR", dependecies =T)
warnings()
## Setup Filepaths and -names
setwd("/media/Storage1/Plasmodium/Data/Run01_Profiler/Analysis/Profiler/RUN/00_ALIGNMENT/monoNuc")
fileNames <- grep(".bam", list.files(), value = T) #args[1]
library(ggpubr)
BiocManager::install("ggpubr")
BiocManager::install("ggpubr")
library(zoo)
install.packages("zoo")
library(zoo)
vignette("zoo")
BiocManager::install("zoo")
BiocManager::install("zoo", force = T)
args <- c("[MNase-seq_T5", "MNase-seq_T25", "MNase-seq_T15", "MNase-seq_T10", "MNase-seq_T30", "MNase-seq_T40", "MNase-seq_T35]", "MNase-seq_T5_qNorm.bw", "MNase-seq_T25_qNorm.bw", "MNase-seq_T15_qNorm.bw", "MNase-seq_T10_qNorm.bw", "MNase-seq_T30_qNorm.bw", "MNase-seq_T40_qNorm.bw", "MNase-seq_T35_qNorm.bw", "/media/linuxmac/Storage1/Plasmodium/Data/Annotation/chrom_Sizes_red.txt")
## Set directories
inFiles <- grep(".bw",args , value = T)
fileNames <- grep(ignore.case = c(".txt",".bw"),args, value = T)
?grep
fileNames <- grep(ignore.case = c(".txt",".bw"),x = args, value = T)
fileNames <- grep(".txt .bw",args)
fileNames <- grep(".txt.bw",args)
fileNames <- grep(c(".bw",".txt"),args)
fileNames <- args[-grep(c(".bw",".txt"),args)]
fileNames <- gsub("[][, ]","" ,fileNames)
fileNames
fileNames <- args[-grep(".bw",args)]
fileNames <- args(-grep(".txt", args))
fileNames <- gsub("[][, ]","" ,fileNames)
## Set directories
inFiles <- grep(".bw",args , value = T)
fileNames <- args[-grep(".bw",args)]
fileNames <- args(-grep(".txt", args))
fileNames <- args[-grep(".bw",args)]
fileNames <- args[-grep(".txt", args)]
fileNames <- args[-grep(".bw",args)]
fileNames <- fileNames[-grep(".txt", args)]
fileNames
fileNames <- fileNames[-grep(".txt", fileNames)]
fileNames <- gsub("[][, ]","" ,fileNames)
fileNames
chrSizes <- read_delim(grep(".txt",args, value = T))
library(tidyverse)
library(plyranges)
suppressMessages(library(zoo))
library(furrr)
chrSizes <- read_delim(grep(".txt",args, value = T))
args[15]<-"/Volumes/Storage1/Plasmodium/Data/Annotation/chrom_Sizes_red.txt"
chrSizes <- read_delim(grep(".txt",args, value = T))
colnames(chrSizes) <- c("seqnames","size")
View(chrSizes)
chrSizes <- read_delim(grep(".txt",args, value = T))
?read_delim
View(chrSizes)
chrSizes <- read.table(grep(".txt",args, value = T))
chrSizes <- read_delim(grep(".txt",args, value = T))
chrSizes <- read.table(grep(".txt",args, value = T))
colnames(chrSizes) <- c("seqnames","size")
?write_tsv
?tsv
??tsv
